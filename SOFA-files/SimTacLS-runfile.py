import Sofa
import math
import os

outer_skin_indices = [7162L, 7163L, 7164L, 7165L, 7166L, 7167L, 7168L, 7169L, 7170L, 7171L, 7172L, 7173L, 7174L, 7175L, 7176L, 7177L, 7178L, 7179L, 7180L, 7181L, 7182L, 7183L, 7184L, 7185L, 7186L, 7187L, 7188L, 7189L, 7190L, 7191L, 7192L, 7193L, 7194L, 7195L, 7196L, 7197L, 7198L, 7199L, 7200L, 7201L, 7202L, 7203L, 7204L, 7205L, 7206L, 7207L, 7208L, 7209L, 7210L, 7211L, 7212L, 7213L, 7214L, 7215L, 7216L, 7217L, 7218L, 7219L, 7220L, 7221L, 7222L, 7223L, 7224L, 7225L, 7226L, 7227L, 7228L, 7229L, 7230L, 7231L, 7232L, 7233L, 7234L, 7235L, 7236L, 7237L, 7238L, 7239L, 7240L, 7241L, 7242L, 7243L, 7244L, 7245L, 7246L, 7247L, 7248L, 7249L, 7250L, 7251L, 7252L, 7253L, 7254L, 7255L, 7256L, 7257L, 7258L, 7259L, 7260L, 7261L, 7262L, 7263L, 7264L, 7265L, 7266L, 7267L, 7268L, 7269L, 7270L, 7271L, 7272L, 7273L, 7274L, 7275L, 7276L, 7277L, 7278L, 7279L, 7280L, 7281L, 7282L, 7283L, 7284L, 7285L, 7286L, 7287L, 7288L, 7289L, 7290L, 7291L, 7292L, 7293L, 7294L, 7295L, 7296L, 7297L, 7298L, 7299L, 7300L, 7301L, 7302L, 7303L, 7304L, 7305L, 7306L, 7307L, 7308L, 7309L, 7310L, 7311L, 7312L, 7313L, 7314L, 7315L, 7316L, 7317L, 7318L, 7319L, 7320L, 7321L, 7322L, 7323L, 7324L, 7325L, 7326L, 7327L, 7328L, 7329L, 7330L, 7331L, 7332L, 7333L, 7334L, 7335L, 7336L, 7337L, 7338L, 7339L, 7340L, 7341L, 7342L, 7343L, 7344L, 7345L, 7346L, 7347L, 7348L, 7349L, 7350L, 7351L, 7352L, 7353L, 7354L, 7355L, 7356L, 7357L, 7358L, 7359L, 7360L, 7361L, 7362L, 7363L, 7364L, 7365L, 7366L, 7367L, 7368L, 7369L, 7370L, 7371L, 7372L, 7373L, 7374L, 7375L, 7376L, 7377L, 7378L, 7379L, 7380L, 7381L, 7382L, 7383L, 7384L, 7385L, 7386L, 7387L, 7388L, 7389L, 7390L, 7391L, 7392L, 7393L, 7394L, 7395L, 7396L, 7397L, 7398L, 7399L, 7400L, 7401L, 7402L, 7403L, 7404L, 7405L, 7406L, 7407L, 7408L, 7409L, 7410L, 7411L, 7412L, 7413L, 7414L, 7415L, 7416L, 7417L, 7418L, 7419L, 7420L, 7421L, 7422L, 7423L, 7424L, 7425L, 7426L, 7427L, 7428L, 7429L, 7430L, 7431L, 7432L, 7433L, 7434L, 7435L, 7436L, 7437L, 7438L, 7439L, 7440L, 7441L, 7442L, 7443L, 7444L, 7445L, 7446L, 7447L, 7448L, 7449L, 7450L, 7451L, 7452L, 7453L, 7454L, 7455L, 7456L, 7457L, 7458L, 7459L, 7460L, 7461L, 7462L, 7463L, 7464L, 7465L, 7466L, 7467L, 7468L, 7469L, 7470L, 7471L, 7472L, 7473L, 2623L, 2624L, 2625L, 2626L, 2627L, 2628L, 2629L, 2630L, 2631L, 2632L, 2633L, 2634L, 2635L, 2636L, 2637L, 2638L, 2639L, 2640L, 2641L, 2642L, 2643L, 2614L, 2615L, 2616L, 2617L, 2618L, 2619L, 2620L, 2621L, 2622L, 2644L, 2645L, 2646L, 2647L, 2648L, 2649L, 2650L, 2651L, 2652L, 2653L, 2654L, 2655L, 2656L, 2657L, 2658L, 2659L, 2660L, 2661L, 2662L, 2663L, 2664L, 2665L, 2666L, 2667L, 2668L, 2669L, 2670L, 2671L, 2672L, 2673L, 1029L, 1030L, 1031L, 1032L, 7474L, 7475L, 7476L, 7477L, 7478L, 7479L, 7480L, 7481L, 7482L, 7483L, 7484L, 7485L, 7486L, 7487L, 7488L, 7489L, 7490L, 7491L, 7492L, 7493L, 7494L, 7495L, 7496L, 7497L, 7498L, 7499L, 7500L, 7501L, 7502L, 7503L, 7504L, 7505L, 7506L, 7507L, 7508L, 7509L, 7510L, 7511L, 7512L, 7513L, 7514L, 7515L, 7516L, 7517L, 7518L, 7519L, 7520L, 7521L, 7522L, 7523L, 7524L, 7525L, 7526L, 7527L, 7528L, 7529L, 7530L, 7531L, 7532L, 7533L, 7534L, 7535L, 7536L, 7537L, 7538L, 7539L, 7540L, 7541L, 7542L, 7543L, 7544L, 7545L, 7546L, 7547L, 7548L, 7549L, 7550L, 7551L, 7552L, 7553L, 7554L, 7555L, 7556L, 7557L, 7558L, 7559L, 7560L, 7561L, 7562L, 7563L, 7564L, 7565L, 7566L, 7567L, 7568L, 7569L, 7570L, 7571L, 7572L, 7573L, 7574L, 7575L, 7576L, 7577L, 7578L, 7579L, 7580L, 7581L, 7582L, 7583L, 7584L, 7585L, 7586L, 7587L, 7588L, 7589L, 7590L, 7591L, 7592L, 7593L, 7594L, 7595L, 7596L, 7597L, 7598L, 7599L, 7600L, 7601L, 7602L, 7603L, 7604L, 7605L, 7606L, 7607L, 7608L, 7609L, 7610L, 7611L, 7612L, 7613L, 7614L, 7615L, 7616L, 7617L, 7618L, 7619L, 7620L, 7621L, 7622L, 7623L, 7624L, 7625L, 7626L, 7627L, 7628L, 7629L, 7630L, 7631L, 7632L, 7633L, 7634L, 7635L, 7636L, 7637L, 7638L, 7639L, 7640L, 7641L, 7642L, 7643L, 7644L, 7645L, 7646L, 7647L, 7648L, 7649L, 7650L, 7651L, 7652L, 7653L, 7654L, 7655L, 7656L, 7657L, 7658L, 7659L, 7660L, 7661L, 7662L, 7663L, 7664L, 7665L, 7666L, 7667L, 7668L, 7669L, 7670L, 7671L, 7672L, 7673L, 7674L, 7675L, 7676L, 7677L, 7678L, 7679L, 7680L, 7681L, 7682L, 7683L, 7684L, 7685L, 7686L, 7687L, 7688L, 7689L, 7690L, 7691L, 7692L, 7693L, 7694L, 7695L, 7696L, 7697L, 7698L, 7699L, 7700L, 7701L, 7702L, 7703L, 7704L, 7705L, 7706L, 7707L, 7708L, 7709L, 7710L, 7711L, 7712L, 7713L, 7714L, 7715L, 7716L, 7717L, 7718L, 7719L, 7720L, 7721L, 7722L, 7723L, 7724L, 7725L, 7726L, 7727L, 7728L, 7729L, 7730L, 7731L, 7732L, 7733L, 7734L, 7735L, 7736L, 7737L, 7738L, 7739L, 7740L, 7741L, 7742L, 7743L, 7744L, 7745L, 7746L, 7747L, 7748L, 7749L, 7750L, 7751L, 7752L, 7753L, 7754L, 7755L, 7756L, 7757L, 7758L, 7759L, 7760L, 7761L, 7762L, 7763L, 7764L, 7765L, 7766L, 7767L, 7768L, 7769L, 7770L, 7771L, 7772L, 7773L, 7774L, 7775L, 7776L, 7777L, 7778L, 7779L, 7780L, 7781L, 7782L, 7783L, 7784L, 7785L, 7786L, 2605L, 2606L, 2607L, 2608L, 2609L, 2610L, 2611L, 2612L, 2613L, 2674L, 2675L, 2676L, 2677L, 2678L, 2679L, 2680L, 2681L, 2682L]

youngModulusFingers = 500
youngModulusStiffLayerFingers = 1500
gap = 5 # distance from dof of pointer to contact surface
coff_contact_stiffess = 0
biggest_skin_diameter = 106.7225
contact_distance = 10  # type: int
init_pointer_pos = (biggest_skin_diameter/2)+ gap + contact_distance - coff_contact_stiffess

radius = 70
angle1 = 120*math.pi/180  # Angle between 1st and 2nd finger in radian
angle2 = 240*math.pi/180  # Angle between 1st and 3rd finger in radian
translateFinger1 = '70 0 0'
translateFinger2 = '0 70 0'
translateFinger3 = '30 30 0'
translations= [translateFinger1,translateFinger2, translateFinger3]
angles=[0,angle1, angle2]
def createScene(rootNode):
    rootNode.findData('gravity').value='0 0 -9810'
    rootNode.findData('dt').value='0.01'

    rootNode.createObject("RequiredPlugin", name="SofaSparseSolver")
    rootNode.createObject("RequiredPlugin", name="SofaPython")
    rootNode.createObject("RequiredPlugin", name="SofaOpenglVisual")
    rootNode.createObject("RequiredPlugin", name="SofaMiscCollision")
    rootNode.createObject("RequiredPlugin", name="SofaBoundaryCondition")
    rootNode.createObject("RequiredPlugin", name="SofaImplicitOdeSolver")
    rootNode.createObject("RequiredPlugin", name="SofaGeneralDeformable")
    rootNode.createObject("RequiredPlugin", name="SofaLoader")
    rootNode.createObject("RequiredPlugin", name="SofaMiscFem")
    rootNode.createObject("RequiredPlugin", name="SofaMeshCollision")
    rootNode.createObject("RequiredPlugin", name="SofaEngine")
    rootNode.createObject("RequiredPlugin", name="SofaConstraint")
    rootNode.createObject("VisualStyle", displayFlags='showVisualModels hideBehaviorModels hideCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')
    rootNode.createObject('PythonScriptController', filename="SimTacLS-controller.py", classname="controller")


    rootNode.createObject("DefaultPipeline", name="CollisionPipeline", verbose="0")
    rootNode.createObject("BruteForceDetection", name="N2")
    rootNode.createObject("DefaultContactManager",name="collision response", response='FrictionContact', responseParams='mu=0.6')
    rootNode.createObject('LocalMinDistance', name='Proximity', alarmDistance=13, contactDistance=contact_distance, angleCone=0.01)
    rootNode.createObject('FreeMotionAnimationLoop')
    rootNode.createObject('GenericConstraintSolver', name='constraint solver', tolerance=1e-12, maxIterations=80000, computeConstraintForces = 1)
    rootNode.createObject('DiscreteIntersection')
    rootNode.createObject('BackgroundSetting', color=[0, 0.168627, 0.211765])
    rootNode.createObject('OglSceneFrame', style='Arrows', alignment='TopRight')

    ##Finger node
    for i in range(2):
        finger = rootNode.createChild('finger'+str(i+1))
        finger.createObject('EulerImplicitSolver', name='odesolver', rayleighStiffness='0.1', rayleighMass='0.1')
        finger.createObject('SparseLDLSolver', name='preconditioner')
        finger.createObject('TransformEngine', name="transform",
                            template="Rigid3",
                            translation="0 0 0",
                            rotation="0 0 0",
                            scale="1 1 1",
                            input_position="0 0 0  0 0 0 1")
        finger.createObject('MechanicalObject', name='tetras',template='Rigid3d',translation = translations[i], rotation=[0, 90,angles[i]*180/math.pi], showObject = 1,showObjectScale=5)
        finger.createObject('UniformMass', totalMass=0.0001)
        finger.createObject('BoxROI', name='boxROI', box=[10, -20, 45, 195, 20.5, 65], drawBoxes = 0, drawSize = 0.1, doUpdate='0')
        if i == 0:
            finger.createObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness=1e12,
                                angularStiffness=1e12, drawSpring='true')
        else:
            finger.createObject('RestShapeSpringsForceField', points='@../finger1/boxROI.indices', stiffness=1e12,
                                angularStiffness=1e12, drawSpring='true')
        finger.createObject('LinearSolverConstraintCorrection', solverName='preconditioner')

        ##########################################
        # Collision							     #
        ##########################################

        collisionFinger = finger.createChild('collisionFinger')
        collisionFinger.createObject('MechanicalObject', name='collisMech')
        collisionFinger.createObject('SphereCollisionModel', radius="5")
        collisionFinger.createObject('RigidMapping')

        ##########################################
        # Visualization						  #
        ##########################################
        modelVisu = finger.createChild('visu')
        modelVisu.createObject('MeshSTLLoader', name='loader', filename='mesh/pointer-stl-fine.stl',scale=1)
        modelVisu.createObject('OglModel', src='@loader',template='Vec3d', color=[0.7, 0.7, 0.7, 0.6])
        modelVisu.createObject('RigidMapping')


    ## Skin node
    skin = rootNode.createChild('skin')
    skin.findData('gravity').value = '0 0 -9810'

    skin.createObject("EulerImplicitSolver", name="cg_odesolver")
    skin.createObject('SparseLDLSolver', name='linearSolver')
    skin.createObject("MeshVTKLoader", filename="mesh/skin-vtk.vtk", name="loader", translation='0 0 -10',
                      rotation='180 0 0', createSubelements=0, onlyAttachedPoints=0)
    skin.createObject("MechanicalObject", template="Vec3d", src="@loader", name="DOFs", showIndices = 0,showIndicesScale =0.001, showColor = 'red', showVectors = 0, showVectorsScale = 0.6, drawMode = 2  )
    skin.createObject("TetrahedronSetTopologyContainer", src="@loader", name="topology", checkTopology=1)
    skin.createObject("TetrahedronSetTopologyModifier", name="Modifier")
    skin.createObject("TetrahedronSetGeometryAlgorithms", name="GeomAlgo", template="Vec3d")
    skin.createObject("UniformMass", totalMass='0.00028', name="mass" )
    skin.createObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.45,  youngModulus=0.1262, drawAsEdges=True)
    skin.createObject("BoxROI", template="Vec3d", box="-50 -50 -5 50 50 1 -50 -50 259.5 50 50 260.5", drawBoxes="0",  name="FixedROI",
                      computeEdges="1", computeTriangles="0", computeTetrahedra="0", computeHexahedra="0", drawSize="0.5")
    skin.createObject("BoxROI",  template="Vec3d", box="-70 -70 19.5 70 70 240.5", drawBoxes="0", position="@DOFs.rest_position",
                      name='measuring region', computeEdges="1", computeTriangles="0", computeTetrahedra="0", computeHexahedra="0",
                      drawSize="0.5")
    skin.createObject("FixedConstraint", indices="@FixedROI.indices")
    skin.createObject('LinearSolverConstraintCorrection', solverName='linearSolver')


    ## Collision node
    skinCollision = skin.createChild('SkinCollision')
    skinCollision.createObject("MeshSTLLoader", filename="mesh/skin-stl.stl", name="loader",
                               translation='0 0 0',
                               rotation='180 0 0')
    skinCollision.createObject('MeshTopology', src='@loader', name='topology')
    skinCollision.createObject('MechanicalObject', name='collisMech')
    skinCollision.createObject('TriangleCollisionModel', selfCollision=0)
    skinCollision.createObject('LineCollisionModel', selfCollision=0)
    skinCollision.createObject('PointCollisionModel', selfCollision=0)
    skinCollision.createObject('BarycentricMapping')


    ## Visual node
    visual = skin.createChild('Visual')
    visual.createObject("OglModel", name="Visual", color="yellow")
    visual.createObject("STLExporter", name='skin_exporter', filename="/home/respitory adress ... ",
                        position="@Visual.position",
                        triangles="@Visual.triangles", exportEveryNumberOfSteps="20", enable=False)
    visual.createObject("IdentityMapping", template="Vec3d,Vec3d", name="visualMapping", input="@../DOFs", output="@Visual")

    # markers node
    marker = rootNode.createChild('markers')

    marker.createObject("EulerImplicitSolver", name="cg_odesolver")
    marker.createObject('CGLinearSolver', name='linearSolver', threshold=1e-12)
    marker.createObject("MeshVTKLoader", filename="mesh/marker-vtk.vtk", name="loader", translation = '0 0 -10', rotation = '180 0 0', createSubelements="1" )
    marker.createObject("MechanicalObject", template="Vec3d", src="@loader", name="DOFs-marker",showIndices = 0,showIndicesScale =0.0008)
    marker.createObject("TetrahedronSetTopologyContainer", src="@loader", name="topology")
    marker.createObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.49,
                      youngModulus=5000000)
    marker.createObject("UniformMass", totalMass='0.00000000000000353', name="mass")

    ## Visual node
    marker_visual = marker.createChild('Visual')
    marker_visual.createObject('MeshSTLLoader', name='loader', filename='mesh/marker-stl.stl',translation = '0 0 -10', rotation = '180 0 0')
    marker_visual.createObject("OglModel", name="Visual-marker", color="red", src='@loader')
    marker_visual.createObject("STLExporter", name = 'marker_exporter', filename = "/home/respitory adress ... ", position = "@Visual.position",
                        triangles = "@Visual.triangles", exportEveryNumberOfSteps = "20", enable = False)
    marker_visual.createObject("BarycentricMapping")
    marker.createObject('UncoupledConstraintCorrection')
    # ## Attach node
    attach = rootNode.createChild('attach')
    attach.createObject("AttachConstraint", object1="@skin", object2="@markers", twoWay="false",
                        indices
                        indices2="3079 1026 1027 1030 1031 3 2 3087 1034 1035 1038 1039 7 6 3095 1042 1043 1046 1047 11 10 3103 1050 1051 1054 1055 15 14 3111 1058 1059 1062 1063 19 18 3119 1066 1067 1070 1071 23 22 3127 1074 1075 1078 1079 27 26 3135 1082 1083 1086 1087 31 30 3319 1266 1267 1270 1271 123 122 3311 1258 1259 1262 1263 119 118 3303 1250 1251 1254 1255 115 114 3295 1242 1243 1246 1247 111 110 3287 1234 1235 1238 1239 107 106 3279 1226 1227 1230 1231 103 102 3271 1218 1219 1222 1223 99 98 3263 1210 1211 1214 1215 95 94 3255 1202 1203 1206 1207 91 90 3247 1194 1195 1198 1199 87 86 3239 1186 1187 1190 1191 83 82 3231 1178 1179 1182 1183 79 78 3223 1170 1171 1174 1175 75 74 3215 1162 1163 1166 1167 71 70 3207 1154 1155 1158 1159 67 66 4159 2106 2107 2110 2111 543 542 4151 2098 2099 2102 2103 539 538 4143 2090 2091 2094 2095 535 534 4135 2082 2083 2086 2087 531 530 4127 2074 2075 2078 2079 527 526 4119 2066 2067 2070 2071 523 522 4111 2058 2059 2062 2063 519 518 4103 2050 2051 2054 2055 515 514 4095 2042 2043 2046 2047 511 510 4087 2034 2035 2038 2039 507 506 4079 2026 2027 2030 2031 503 502 4071 2018 2019 2022 2023 499 498 4063 2010 2011 2014 2015 495 494 4055 2002 2003 2006 2007 491 490 4047 1994 1995 1998 1999 487 486 4039 1986 1987 1990 1991 483 482 4031 1978 1979 1982 1983 479 478 4023 1970 1971 1974 1975 475 474 4015 1962 1963 1966 1967 471 470 4007 1954 1955 1958 1959 467 466 3999 1946 1947 1950 1951 463 462 3991 1938 1939 1942 1943 459 458 3983 1930 1931 1934 1935 455 454 3975 1922 1923 1926 1927 451 450 3967 1914 1915 1918 1919 447 446 3959 1906 1907 1910 1911 443 442 3951 1898 1899 1902 1903 439 438 3943 1890 1891 1894 1895 435 434 3935 1882 1883 1886 1887 431 430 3927 1874 1875 1878 1879 427 426 3919 1866 1867 1870 1871 423 422 3911 1858 1859 1862 1863 419 418 3903 1850 1851 1854 1855 415 414 3895 1842 1843 1846 1847 411 410 3887 1834 1835 1838 1839 407 406 3879 1826 1827 1830 1831 403 402 3871 1818 1819 1822 1823 399 398 3863 1810 1811 1814 1815 395 394 3855 1802 1803 1806 1807 391 390 3847 1794 1795 1798 1799 387 386 3839 1786 1787 1790 1791 383 382 3831 1778 1779 1782 1783 379 378 3823 1770 1771 1774 1775 375 374 3815 1762 1763 1766 1767 371 370 3807 1754 1755 1758 1759 367 366 3799 1746 1747 1750 1751 363 362 3791 1738 1739 1742 1743 359 358 3783 1730 1731 1734 1735 355 354 3775 1722 1723 1726 1727 351 350 3767 1714 1715 1718 1719 347 346 3759 1706 1707 1710 1711 343 342 3751 1698 1699 1702 1703 339 338 3743 1690 1691 1694 1695 335 334 3735 1682 1683 1686 1687 331 330 3727 1674 1675 1678 1679 327 326 3719 1666 1667 1670 1671 323 322 3711 1658 1659 1662 1663 319 318 3703 1650 1651 1654 1655 315 314 3695 1642 1643 1646 1647 311 310 3687 1634 1635 1638 1639 307 306 3679 1626 1627 1630 1631 303 302 3671 1618 1619 1622 1623 299 298 3663 1610 1611 1614 1615 295 294 3655 1602 1603 1606 1607 291 290 3647 1594 1595 1598 1599 287 286 3639 1586 1587 1590 1591 283 282 3631 1578 1579 1582 1583 279 278 3623 1570 1571 1574 1575 275 274 3615 1562 1563 1566 1567 271 270 3607 1554 1555 1558 1559 267 266 3599 1546 1547 1550 1551 263 262 3591 1538 1539 1542 1543 259 258 3583 1530 1531 1534 1535 255 254 3575 1522 1523 1526 1527 251 250 3567 1514 1515 1518 1519 247 246 3559 1506 1507 1510 1511 243 242 3551 1498 1499 1502 1503 239 238 3543 1490 1491 1494 1495 235 234 3535 1482 1483 1486 1487 231 230 3527 1474 1475 1478 1479 227 226 3519 1466 1467 1470 1471 223 222 3511 1458 1459 1462 1463 219 218 3503 1450 1451 1454 1455 215 214 3495 1442 1443 1446 1447 211 210 3487 1434 1435 1438 1439 207 206 3479 1426 1427 1430 1431 203 202 3471 1418 1419 1422 1423 199 198 3463 1410 1411 1414 1415 195 194 3455 1402 1403 1406 1407 191 190 3447 1394 1395 1398 1399 187 186 3439 1386 1387 1390 1391 183 182 3431 1378 1379 1382 1383 179 178 3423 1370 1371 1374 1375 175 174 3415 1362 1363 1366 1367 171 170 3407 1354 1355 1358 1359 167 166 3399 1346 1347 1350 1351 163 162 3391 1338 1339 1342 1343 159 158 3383 1330 1331 1334 1335 155 154 3375 1322 1323 1326 1327 151 150 3367 1314 1315 1318 1319 147 146 3359 1306 1307 1310 1311 143 142 3351 1298 1299 1302 1303 139 138 3343 1290 1291 1294 1295 135 134 3335 1282 1283 1286 1287 131 130 3327 1274 1275 1278 1279 127 126 3191 1142 1143 1138 1139 59 58 5119 3070 3071 3066 3067 1023 1022 5111 3062 3063 3058 3059 1019 1018 5103 3054 3055 3050 3051 1015 1014 5095 3046 3047 3042 3043 1011 1010 5087 3038 3039 3034 3035 1007 1006 5079 3030 3031 3026 3027 1003 1002 5071 3022 3023 3018 3019 999 998 5063 3014 3015 3010 3011 995 994 5055 3006 3007 3002 3003 991 990 5047 2998 2999 2994 2995 987 986 5039 2990 2991 2986 2987 983 982 5031 2982 2983 2978 2979 979 978 5023 2974 2975 2970 2971 975 974 5015 2966 2967 2962 2963 971 970 5007 2958 2959 2954 2955 967 966 3199 1150 1151 1146 1147 63 62 4279 2230 2231 2226 2227 603 602 4271 2222 2223 2218 2219 599 598 4263 2214 2215 2210 2211 595 594 4255 2206 2207 2202 2203 591 590 4247 2198 2199 2194 2195 587 586 4239 2190 2191 2186 2187 583 582 4231 2182 2183 2178 2179 579 578 4223 2174 2175 2170 2171 575 574 4215 2166 2167 2162 2163 571 570 4207 2158 2159 2154 2155 567 566 4199 2150 2151 2146 2147 563 562 4191 2142 2143 2138 2139 559 558 4183 2134 2135 2130 2131 555 554 4175 2126 2127 2122 2123 551 550 4167 2118 2119 2114 2115 547 546 3143 1094 1095 1090 1091 35 34 4399 2350 2351 2346 2347 663 662 4391 2342 2343 2338 2339 659 658 4383 2334 2335 2330 2331 655 654 4375 2326 2327 2322 2323 651 650 4367 2318 2319 2314 2315 647 646 4359 2310 2311 2306 2307 643 642 4351 2302 2303 2298 2299 639 638 4343 2294 2295 2290 2291 635 634 4335 2286 2287 2282 2283 631 630 4327 2278 2279 2274 2275 627 626 4319 2270 2271 2266 2267 623 622 4311 2262 2263 2258 2259 619 618 4303 2254 2255 2250 2251 615 614 4295 2246 2247 2242 2243 611 610 4287 2238 2239 2234 2235 607 606 3151 1102 1103 1098 1099 39 38 4519 2470 2471 2466 2467 723 722 4511 2462 2463 2458 2459 719 718 4503 2454 2455 2450 2451 715 714 4495 2446 2447 2442 2443 711 710 4487 2438 2439 2434 2435 707 706 4479 2430 2431 2426 2427 703 702 4471 2422 2423 2418 2419 699 698 4463 2414 2415 2410 2411 695 694 4455 2406 2407 2402 2403 691 690 4447 2398 2399 2394 2395 687 686 4439 2390 2391 2386 2387 683 682 4431 2382 2383 2378 2379 679 678 4423 2374 2375 2370 2371 675 674 4415 2366 2367 2362 2363 671 670 4407 2358 2359 2354 2355 667 666 3159 1110 1111 1106 1107 43 42 4639 2590 2591 2586 2587 783 782 4631 2582 2583 2578 2579 779 778 4623 2574 2575 2570 2571 775 774 4615 2566 2567 2562 2563 771 770 4607 2558 2559 2554 2555 767 766 4599 2550 2551 2546 2547 763 762 4591 2542 2543 2538 2539 759 758 4583 2534 2535 2530 2531 755 754 4575 2526 2527 2522 2523 751 750 4567 2518 2519 2514 2515 747 746 4559 2510 2511 2506 2507 743 742 4551 2502 2503 2498 2499 739 738 4543 2494 2495 2490 2491 735 734 4535 2486 2487 2482 2483 731 730 4527 2478 2479 2474 2475 727 726 3167 1118 1119 1114 1115 47 46 4759 2710 2711 2706 2707 843 842 4751 2702 2703 2698 2699 839 838 4743 2694 2695 2690 2691 835 834 4735 2686 2687 2682 2683 831 830 4727 2678 2679 2674 2675 827 826 4719 2670 2671 2666 2667 823 822 4711 2662 2663 2658 2659 819 818 4703 2654 2655 2650 2651 815 814 4695 2646 2647 2642 2643 811 810 4687 2638 2639 2634 2635 807 806 4679 2630 2631 2626 2627 803 802 4671 2622 2623 2618 2619 799 798 4663 2614 2615 2610 2611 795 794 4655 2606 2607 2602 2603 791 790 4647 2598 2599 2594 2595 787 786 3175 1126 1127 1122 1123 51 50 4879 2830 2831 2826 2827 903 902 4871 2822 2823 2818 2819 899 898 4863 2814 2815 2810 2811 895 894 4855 2806 2807 2802 2803 891 890 4847 2798 2799 2794 2795 887 886 4839 2790 2791 2786 2787 883 882 4831 2782 2783 2778 2779 879 878 4823 2774 2775 2770 2771 875 874 4815 2766 2767 2762 2763 871 870 4807 2758 2759 2754 2755 867 866 4799 2750 2751 2746 2747 863 862 4791 2742 2743 2738 2739 859 858 4783 2734 2735 2730 2731 855 854 4775 2726 2727 2722 2723 851 850 4767 2718 2719 2714 2715 847 846 3183 1134 1135 1130 1131 55 54 4999 2950 2951 2946 2947 963 962 4991 2942 2943 2938 2939 959 958 4983 2934 2935 2930 2931 955 954 4975 2926 2927 2922 2923 951 950 4967 2918 2919 2914 2915 947 946 4959 2910 2911 2906 2907 943 942 4951 2902 2903 2898 2899 939 938 4943 2894 2895 2890 2891 935 934 4935 2886 2887 2882 2883 931 930 4927 2878 2879 2874 2875 927 926 4919 2870 2871 2866 2867 923 922 4911 2862 2863 2858 2859 919 918 4903 2854 2855 2850 2851 915 914 4895 2846 2847 2842 2843 911 910 4887 2838 2839 2834 2835 906 907",
                        constraintFactor
    return rootNode


